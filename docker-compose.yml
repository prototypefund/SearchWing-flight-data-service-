version: "3.3"

services:
  server:
    container_name: api
    build:
      context: server
      target: dev
    stdin_open: true
    tty: true
    command: sh -c "alembic upgrade head && python scripts/fill_up_db.py && python bin/api.py"
    volumes:
      - ./server:/searchwing
      - ./storage:/data/
    ports:
      - "80:80"
    depends_on:
      - db
    environment:
      POSTGRES_USER: searchwing
      POSTGRES_PASSWORD: searchwing
      POSTGRES_DB: searchwing
      POSTGRES_SERVER: db
      POSTGRES_PORT: 5432

  db:
    container_name: db
    build:
      context: server
      dockerfile: Dockerfile.db
    restart: always
    environment:
      POSTGRES_USER: searchwing
      POSTGRES_PASSWORD: searchwing
      POSTGRES_DB: searchwing
    ports:
      - "5432:5432"
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U postgres" ]
      interval: 30s
      timeout: 30s
      retries: 3
    volumes:
      - ./server/db:/docker-entrypoint-initdb.d/


  test-db:
    container_name: test-db
    build:
      context: server
      dockerfile: Dockerfile.db
    restart: always
    environment:
      POSTGRES_USER: searchwing
      POSTGRES_PASSWORD: searchwing
      POSTGRES_DB: searchwing
    ports:
      - "5431:5432"
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U postgres" ]
      interval: 30s
      timeout: 30s
      retries: 3
    volumes:
      - ./server/db:/docker-entrypoint-initdb.d/

  pgadmin:
    container_name: pgadmin4_container
    image: dpage/pgadmin4
    restart: always
    environment:
      PGADMIN_DEFAULT_EMAIL: admin@admin.com
      PGADMIN_DEFAULT_PASSWORD: root
    ports:
      - "5050:80"

  grafana:
    container_name: grafana
    image: grafana/grafana-oss:8.5.16
    restart: always
    environment:
      GF_INSTALL_PLUGINS: grafana-clock-panel 1.0.1,grafana-simple-json-datasource
    ports:
      - "3000:3000"
  frontend:
    container_name: flight-log-viewer-fe
    image: flight-log-viewer-fe-dev
    # network_mode: "host"
    build:
      context: ./client
    volumes:
      - ./client/nextapp/node_modules
      - ./client/nextapp:/app
    ports:
      - 3000:3000
    environment:
      - NEXT_PUBLIC_API_URL

volumes:
  storage:
