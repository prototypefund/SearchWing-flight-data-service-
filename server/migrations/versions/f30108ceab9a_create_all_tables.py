"""create all tables

Revision ID: f30108ceab9a
Revises:
Create Date: 2023-03-28 13:43:43.283537

"""
import geoalchemy2
import sqlalchemy as sa
from alembic import op

# revision identifiers, used by Alembic.
revision = "f30108ceab9a"
down_revision = None
branch_labels = None
depends_on = None


def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table(
        "drone",
        sa.Column("id", sa.Integer(), autoincrement=True, nullable=False),
        sa.Column("created_at", sa.DateTime(), nullable=False),
        sa.Column("updated_at", sa.DateTime(), nullable=True),
        sa.Column("name", sa.String(), nullable=False),
        sa.Column("model", sa.String(), nullable=False),
        sa.Column("description", sa.String(), nullable=True),
        sa.Column(
            "status",
            sa.Enum(
                "ready_for_flight",
                "needs_repair",
                "lost",
                "out_of_service",
                name="dronestatus",
            ),
            nullable=False,
        ),
        sa.Column("sys_thismav", sa.Integer(), nullable=False),
        sa.PrimaryKeyConstraint("id"),
        sa.UniqueConstraint("name"),
    )
    op.create_index(op.f("ix_drone_id"), "drone", ["id"], unique=False)
    op.create_table(
        "mission",
        sa.Column("id", sa.Integer(), autoincrement=True, nullable=False),
        sa.Column("created_at", sa.DateTime(), nullable=False),
        sa.Column("updated_at", sa.DateTime(), nullable=True),
        sa.Column("name", sa.String(length=50), nullable=False),
        sa.Column("description", sa.String(), nullable=False),
        sa.Column("location", sa.String(), nullable=False),
        sa.Column("start_date", sa.Date(), nullable=False),
        sa.Column("end_date", sa.Date(), nullable=False),
        sa.Column("partner_organization", sa.String(), nullable=True),
        sa.PrimaryKeyConstraint("id"),
        sa.UniqueConstraint("name"),
    )
    op.create_index(op.f("ix_mission_id"), "mission", ["id"], unique=False)
    op.create_table(
        "flight",
        sa.Column("id", sa.Integer(), autoincrement=True, nullable=False),
        sa.Column("created_at", sa.DateTime(), nullable=False),
        sa.Column("updated_at", sa.DateTime(), nullable=True),
        sa.Column("fk_drone", sa.Integer(), nullable=False),
        sa.Column("fk_mission", sa.Integer(), nullable=True),
        sa.Column("location", sa.String(), nullable=False),
        sa.Column("pilot", sa.String(), nullable=True),
        sa.Column("observer", sa.String(), nullable=True),
        sa.Column(
            "rating",
            sa.Enum("good", "problems", "crash", name="flightrating"),
            nullable=False,
        ),
        sa.Column(
            "purpose",
            sa.Enum("test", "pilot_training", "mission", name="flightpurpose"),
            nullable=False,
        ),
        sa.Column("notes", sa.Text(), nullable=True),
        sa.Column("drone_needs_repair", sa.Boolean(), nullable=False),
        sa.Column("temperature_celsius", sa.Float(), nullable=True),
        sa.Column(
            "wind",
            sa.Enum("strong", "medium", "low", name="windintensity"),
            nullable=True,
        ),
        sa.Column("log_start_time", sa.DateTime(), nullable=True),
        sa.Column("log_end_time", sa.DateTime(), nullable=True),
        sa.Column("log_duration", sa.Interval(), nullable=True),
        sa.Column("start_latitude", sa.String(), nullable=True),
        sa.Column("start_longitude", sa.String(), nullable=True),
        sa.Column(
            "start_geo",
            geoalchemy2.types.Geometry(geometry_type="POINT", from_text="ST_GeomFromEWKT", name="geometry"),
            nullable=True,
        ),
        sa.Column("end_latitude", sa.String(), nullable=True),
        sa.Column("end_longitude", sa.String(), nullable=True),
        sa.Column(
            "end_geo",
            geoalchemy2.types.Geometry(geometry_type="POINT", from_text="ST_GeomFromEWKT", name="geometry"),
            nullable=True,
        ),
        sa.Column("hardware_version", sa.String(), nullable=True),
        sa.Column("firmware_version", sa.String(), nullable=True),
        sa.Column("distance_km", sa.Float(), nullable=True),
        sa.Column("max_groundspeed", sa.Float(), nullable=True),
        sa.Column("min_groundspeed", sa.Float(), nullable=True),
        sa.Column("avg_groundspeed", sa.Float(), nullable=True),
        sa.Column("max_airspeed", sa.Float(), nullable=True),
        sa.Column("min_airspeed", sa.Float(), nullable=True),
        sa.Column("avg_airspeed", sa.Float(), nullable=True),
        sa.Column("max_vertical_speed_up", sa.Float(), nullable=True),
        sa.Column("min_vertical_speed_down", sa.Float(), nullable=True),
        sa.Column("max_telemetry_distance_km", sa.Float(), nullable=True),
        sa.Column("max_battery_voltage", sa.Float(), nullable=True),
        sa.Column("min_battery_voltage", sa.Float(), nullable=True),
        sa.Column("delta_battery_voltage", sa.Float(), nullable=True),
        sa.Column("max_power_w", sa.Float(), nullable=True),
        sa.Column("min_power_w", sa.Float(), nullable=True),
        sa.Column("avg_power_w", sa.Float(), nullable=True),
        sa.Column("max_windspeed_kmh", sa.Float(), nullable=True),
        sa.Column("min_windspeed_kmh", sa.Float(), nullable=True),
        sa.Column("avg_windspeed_kmg", sa.Float(), nullable=True),
        sa.Column("energy_consumed_wh", sa.Float(), nullable=True),
        sa.ForeignKeyConstraint(
            ["fk_drone"],
            ["drone.id"],
        ),
        sa.ForeignKeyConstraint(
            ["fk_mission"],
            ["mission.id"],
        ),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_index(op.f("ix_flight_id"), "flight", ["id"], unique=False)
    op.create_table(
        "drone_mission_association",
        sa.Column("drone_id", sa.Integer(), nullable=False),
        sa.Column("flight_id", sa.Integer(), nullable=False),
        sa.ForeignKeyConstraint(
            ["drone_id"],
            ["drone.id"],
        ),
        sa.ForeignKeyConstraint(
            ["flight_id"],
            ["flight.id"],
        ),
        sa.PrimaryKeyConstraint("drone_id", "flight_id"),
    )
    op.create_table(
        "flight_files",
        sa.Column("file_type", sa.String(), nullable=False),
        sa.Column("location", sa.String(), nullable=False),
        sa.Column("file_uri", sa.String(), nullable=False),
        sa.Column("flight_id", sa.Integer(), nullable=True),
        sa.Column("version", sa.Integer(), nullable=False),
        sa.ForeignKeyConstraint(
            ["flight_id"],
            ["flight.id"],
        ),
        sa.PrimaryKeyConstraint("file_uri"),
        sa.UniqueConstraint("file_uri"),
    )
    op.create_table(
        "misssion_flight_association",
        sa.Column("mission_id", sa.Integer(), nullable=False),
        sa.Column("flight_id", sa.Integer(), nullable=False),
        sa.ForeignKeyConstraint(
            ["flight_id"],
            ["flight.id"],
        ),
        sa.ForeignKeyConstraint(
            ["mission_id"],
            ["mission.id"],
        ),
        sa.PrimaryKeyConstraint("mission_id", "flight_id"),
    )
    # ### end Alembic commands ###


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_table("misssion_flight_association")
    op.drop_table("flight_files")
    op.drop_table("drone_mission_association")
    op.drop_index(op.f("ix_flight_id"), table_name="flight")
    op.drop_table("flight")
    op.drop_index(op.f("ix_mission_id"), table_name="mission")
    op.drop_table("mission")
    op.drop_index(op.f("ix_drone_id"), table_name="drone")
    op.drop_table("drone")
    # ### end Alembic commands ###
